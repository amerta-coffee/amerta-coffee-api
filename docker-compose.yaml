services:
  db:
    image: postgres:16-alpine
    container_name: "amerta-coffee-db"
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - amerta_coffee_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      start_period: 10s
      interval: 20s
      timeout: 5s
      retries: 3

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: "amerta-coffee-api"
    restart: unless-stopped
    ports:
      - "${WEB_PORT}:3000"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}?schema=public
      JWT_SECRET: ${JWT_SECRET}
      CORS_ALLOWS_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      WEB_ENV: ${WEB_ENV}
    command: >
      bash -c "
        bun db:generate && 
        bun db:migrate:deploy && 
        if [ \"${WEB_ENV}\" = \"development\" ]; then 
          bun run dev; 
        else 
          bun run start; 
        fi
      "
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - ./prisma:/app/prisma
      - ./package.json:/app/package.json
      - ./tsconfig.json:/app/tsconfig.json
    networks:
      - amerta_coffee_network
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:3000/health"]
      start_period: 10s
      interval: 20s
      timeout: 5s
      retries: 3

volumes:
  pgdata:

networks:
  amerta_coffee_network:
    driver: bridge
