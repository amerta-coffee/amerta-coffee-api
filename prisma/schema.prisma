// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

enum ProductStatus {
  DRAFT // The product is incomplete and not visible to the public.
  INACTIVE // The product is not for sale but visible (e.g., "Coming Soon").
  ACTIVE // The product is available for purchase and publicly visible.
  PREORDER // The product is not yet released but can be pre-ordered.
  OUTOFSTOCK // The product is out of stock but still publicly visible.
  ARCHIVED // The product is discontinued and no longer visible or purchasable.
}

model User {
  id        String    @id @default(cuid())
  name      String    @db.VarChar(100)
  email     String    @unique @db.VarChar(128)
  password  String    @db.VarChar(255)
  avatarUrl String?   @db.VarChar(255)
  phone     String?   @db.VarChar(32)
  birthdate DateTime?
  gender    String?

  addresses UserAddress[]
  roles     UserRole[]
  tokens    UserToken[]   @relation("UserTokens")
  products  Product[]
  carts     Cart[]
  orders    Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model UserAddress {
  id         String  @id @default(cuid())
  street     String  @db.VarChar(255)
  city       String  @db.VarChar(100)
  state      String  @db.VarChar(100)
  postalCode String  @db.VarChar(20)
  country    String  @db.VarChar(100)
  isPrimary  Boolean @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]

  @@index([userId])
  @@map("user_addresses")
}

model UserToken {
  id        String   @id @default(cuid())
  userId    String
  jwtId     String   @unique @db.Text
  userAgent String?  @db.Text
  revoked   Boolean  @default(false)
  issuedAt  DateTime @default(now())
  expiresAt DateTime

  user User @relation("UserTokens", fields: [userId], references: [id], onDelete: Cascade)

  @@index([jwtId, revoked, expiresAt])
  @@map("user_tokens")
}

model Role {
  id          String  @id @default(cuid())
  name        String  @db.VarChar(50)
  description String? @db.VarChar(255)

  rolePermission RolePermission[]
  userRole       UserRole[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("roles")
}

model Permission {
  id          String  @id @default(cuid())
  name        String  @db.VarChar(50)
  description String? @db.VarChar(255)

  rolePermission RolePermission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("permissions")
}

model RolePermission {
  roleId String
  role   Role   @relation(fields: [roleId], references: [id])

  permissionId String
  Permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model UserRole {
  userId String
  User   User   @relation(fields: [userId], references: [id])

  roleId String
  Role   Role   @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
  @@map("user_roles")
}

model Category {
  id          String  @id @default(cuid())
  name        String  @unique @db.VarChar(100)
  description String? @db.Text

  products Product[] @relation("CategoryProducts")

  @@index([name])
  @@map("categories")
}

model Product {
  id            String        @id @default(cuid())
  slug          String        @unique
  sku           String?       @unique @db.VarChar(128)
  name          String        @db.VarChar(255)
  description   String?       @db.Text
  thumbnailUrl  String?
  price         Decimal
  priceDiscount Decimal?
  stockQty      Int           @default(0)
  status        ProductStatus @default(DRAFT)

  userId     String?
  user       User?     @relation(fields: [userId], references: [id])
  categoryId String?
  category   Category? @relation("CategoryProducts", fields: [categoryId], references: [id])

  productAssets    ProductAsset[]    @relation("ProductAssets")
  productDiscounts ProductDiscount[] @relation("ProductDiscounts")
  cartItems        CartItem[]
  orderItems       OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([userId])
  @@index([id, userId])
  @@map("products")
}

model ProductAsset {
  id    String @id @default(cuid())
  url   String @db.Text
  type  String @default("IMAGE")
  order Int    @default(0)

  productId String
  product   Product @relation("ProductAssets", fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@map("product_assets")
}

model ProductDiscount {
  id        String   @id @default(cuid())
  type      String
  value     Decimal
  startDate DateTime
  endDate   DateTime

  productId String
  product   Product @relation("ProductDiscounts", fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@map("product_discounts")
}

model Cart {
  id String @id @default(cuid())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  cartItems CartItem[] @relation("CartItems")

  @@index([userId])
  @@map("carts")
}

model CartItem {
  id       String @id @default(cuid())
  quantity Int    @default(1)

  productId String
  product   Product @relation(fields: [productId], references: [id])
  cartId    String
  cart      Cart    @relation("CartItems", fields: [cartId], references: [id], onDelete: Cascade)

  @@unique([productId, cartId])
  @@map("cart_items")
}

model Order {
  id         String  @id @default(cuid())
  totalPrice Decimal
  status     String  @default("Pending")

  userId String
  user   User   @relation(fields: [userId], references: [id])

  shippingAddressId String
  shippingAddress   UserAddress @relation(fields: [shippingAddressId], references: [id])

  orderItems   OrderItem[]   @relation("OrderItems")
  transactions Transaction[]

  @@index([userId])
  @@index([status])
  @@map("orders")
}

model OrderItem {
  id       String  @id @default(cuid())
  quantity Int     @default(1)
  price    Decimal

  productId String
  product   Product @relation(fields: [productId], references: [id])
  orderId   String
  order     Order   @relation("OrderItems", fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Transaction {
  id          String    @id @default(cuid())
  noInvoice   String    @unique @db.VarChar(128)
  amount      Int
  status      String    @default("Pending")
  paymentDate DateTime?

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([orderId])
  @@index([status])
  @@map("transactions")
}
