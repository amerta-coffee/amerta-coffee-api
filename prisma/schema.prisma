// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  name       String   @db.VarChar(100)
  username   String   @unique @db.VarChar(16)
  email      String   @unique @db.VarChar(128)
  phone      String?  @db.VarChar(32)
  address    String?  @db.VarChar(255)
  avatar_url String?  @db.VarChar(255)
  password   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  tokens   UserToken[] @relation("UserTokens")
  products Product[]
  carts    Cart[]
  orders   Order[]

  @@index([username])
  @@index([email])
  @@map("users")
}

model UserToken {
  id        String   @id @default(cuid())
  userId    String
  token     String
  issuedAt  DateTime @default(now())
  expiresAt DateTime
  revoked   Boolean  @default(false)

  user User @relation("UserTokens", fields: [userId], references: [id])

  @@index([userId, token])
  @@map("user_tokens")
}

model Category {
  id          String  @id @default(cuid())
  name        String  @db.VarChar(100)
  description String? @db.Text

  products Product[] @relation("CategoryProducts")

  @@index([name])
  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  sku         String?  @unique
  slug        String   @unique
  name        String   @db.VarChar(255)
  description String?  @db.Text
  price       Decimal? @db.Money
  stockQty    Int      @default(0)
  isAvailable Boolean  @default(true)

  ownerId    String?
  owner      User?     @relation(fields: [ownerId], references: [id])
  categoryId String?
  category   Category? @relation("CategoryProducts", fields: [categoryId], references: [id])

  productAssets   ProductAsset[]    @relation("ProductAssets")
  productDiscount ProductDiscount[] @relation("ProductDiscounts")
  cartItems       CartItem[]
  orderItems      OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
  @@index([name])
  @@index([ownerId])
  @@index([categoryId])
  @@map("products")
}

model ProductDiscount {
  id        String   @id @default(cuid())
  type      String
  value     Decimal
  startDate DateTime
  endDate   DateTime

  productId String
  product   Product @relation("ProductDiscounts", fields: [productId], references: [id])

  @@index([productId])
  @@map("product_discounts")
}

model ProductAsset {
  id   String @id @default(cuid())
  url  String @db.Text
  type String @default("IMAGE")

  productId String
  product   Product @relation("ProductAssets", fields: [productId], references: [id])

  @@index([productId])
  @@map("product_assets")
}

model Cart {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  cartItems CartItem[] @relation("CartItems")

  @@index([userId])
  @@map("carts")
}

model CartItem {
  id       String @id @default(cuid())
  quantity Int    @default(1)

  productId String
  product   Product @relation(fields: [productId], references: [id])
  cartId    String
  cart      Cart    @relation("CartItems", fields: [cartId], references: [id], onDelete: Cascade)

  @@map("cart_items")
}

model Order {
  id         String @id @default(cuid())
  totalPrice Int    @default(0)
  status     String @default("Pending")

  userId String
  user   User   @relation(fields: [userId], references: [id])

  orderItems   OrderItem[]   @relation("OrderItems")
  transactions Transaction[]

  @@index([userId])
  @@index([status])
  @@map("orders")
}

model OrderItem {
  id       String @id @default(cuid())
  quantity Int
  price    Int

  productId String
  product   Product @relation(fields: [productId], references: [id])
  orderId   String
  order     Order   @relation("OrderItems", fields: [orderId], references: [id])

  @@map("order_items")
}

model Transaction {
  id          String   @id @default(cuid())
  noInvoice   String   @unique @db.VarChar(128)
  amount      Int
  status      String   @default("Pending")
  paymentDate DateTime @default(now())

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([status])
  @@map("transactions")
}
