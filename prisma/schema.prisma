// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  name       String   @db.VarChar(100)
  email      String   @unique @db.VarChar(128)
  phone      String?  @unique @db.VarChar(32)
  address    String?  @db.VarChar(255)
  avatar_url String?  @db.VarChar(255)
  password   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  tokens UserToken[] @relation("UserTokens")
  Cart   Cart[]
  Order  Order[]

  @@map("users")
}

model UserToken {
  id        String   @id @default(cuid())
  userId    String
  token     String
  issuedAt  DateTime @default(now())
  expiresAt DateTime
  revoked   Boolean  @default(false)

  user User @relation("UserTokens", fields: [userId], references: [id])

  @@index([userId, token])
  @@map("user_tokens")
}

model Product {
  id             String   @id @default(cuid())
  name           String   @unique @db.VarChar(100)
  description    String?
  price          Int      @default(0)
  stock_qty      Int      @default(0)
  slug           String?  @unique
  sku            String?  @db.VarChar(100)
  image_url      String[] @db.Text
  specifications Json?
  grinding       Json?
  isAvailable    Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  CartItem  CartItem[]
  OrderItem OrderItem[]

  @@map("products")
}

model Cart {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items CartItem[] @relation("CartItems")
  user  User       @relation(fields: [userId], references: [id])

  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])
  cart    Cart    @relation("CartItems", fields: [cartId], references: [id])

  @@unique([cartId, productId])
  @@map("cart_items")
}

model Order {
  id          String   @id @default(cuid())
  userId      String
  totalAmount Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  items OrderItem[] @relation("OrderItems")
  user  User        @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])
  order   Order   @relation("OrderItems", fields: [orderId], references: [id])

  @@map("order_items")
}
